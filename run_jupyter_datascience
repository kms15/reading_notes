#!/bin/bash
VERSION=0.1.1

echo "Checking for existing docker image..."
if ! ( docker image ls | grep -q "reading-notes-notebook\s*${VERSION}" ); then
    echo "Building docker image..."
    docker build -t reading-notes-notebook:${VERSION} .
fi

LOGFILE="$(mktemp)"

function cleanup() {
    echo "cleaning up..."
    rm -f $LOGFILE
    kill $DOCKER_PID || true
}
trap cleanup EXIT

echo "logging to $LOGFILE"

# Find a free port (from https://gist.github.com/lusentis/8453523 )
read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
while :; do
    PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
    ss -ln | grep -q ":$PORT " || break
done

# If the nvidia container toolkit is installed, pass the GPUs
# to docker.
if [[ "__$(which nvidia-ctk)__" != "____" ]]; then
    DOCKER_GPU_OPTS="--runtime=nvidia --gpus all"
else
    DOCKER_GPU_OPTS=
fi

docker run --rm -p 127.0.0.1:$PORT:8888 \
    -u $(id -u):$(id -g) \
    ${DOCKER_GPU_OPTS} \
    -e JUPYTER_ENABLE_LAB=yes \
    -v "${PWD}":/home/jovyan \
    -v  $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
    -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
    reading-notes-notebook:${VERSION} \
    > $LOGFILE 2>&1 &
DOCKER_PID=$!

printf "launching server"
while ! (grep -q http://127.0.0.1:8888 $LOGFILE \
        || ! kill -s 0 $DOCKER_PID); do
    printf .
    sleep 1
done
printf "\n"

# if the container crashed, print an error message
if (! kill -s 0 $DOCKER_PID); then
    echo "Docker container exited prematurely:"
    cat $LOGFILE
fi

URL=$(cat $LOGFILE \
    | grep http://127.0.0.1:8888 \
    | head -1 \
    | sed "s-.*http://127.0.0.1:8888-http://127.0.0.1:$PORT-g" \
)

echo "Launching firefox to connect to $URL"
firefox $URL

echo "press return to exit server..."
read
